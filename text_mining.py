import json

import requests
from lxml import etree
# preparing years
years = range(2006,2017)
# preparing month
months = [str(x) if x > 9 else "0" + str(x) for x in range(1,13)]
# url to fetch data from
url = "http://www.fbr.gov.pk/TradeStatistics/COUNTRYWISE411.aspx"

# headers with context
headers = {
    'pragma': "no-cache",
    'origin': "http://www.fbr.gov.pk",
    'accept-encoding': "gzip, deflate",
    'accept-language': "en-US,en;q=0.8,ur;q=0.6",
    'user-agent': "Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.81 Safari/537.36",
    'content-type': "application/x-www-form-urlencoded",
    'cache-control': "no-cache",
    'referer': "http://www.fbr.gov.pk/TradeStatistics/COUNTRYWISE411.aspx",
    'cookie': "ASP.NET_SessionId=4gnlbljsl0g01h3v11fy5fid",
    'connection': "keep-alive"
    }
yearly_data = {}
all_countries = []

for year in years:
    for month in months:
        payload = "__EVENTTARGET=&__EVENTARGUMENT=&__VIEWSTATE=%2FwEPDwUKMTU1MjY5ODEzMQ9kFgICAw9kFgoCGQ8PFgIeBFRleHRlZGQCGw8PFgIfAAUbQ291bnRyeSBXaXNlIFJlcG9ydCBTdW1tYXJ5ZGQCHA8PFgIfAAUkIEZyb20gSmFudWFyeSAyMDA2IHRvIERlY2VtYmVyIDIwMDYgZGQCHg88KwALAQAPFggeCERhdGFLZXlzFgAeC18hSXRlbUNvdW50At4BHhVfIURhdGFTb3VyY2VJdGVtQ291bnQC3gEeCVBhZ2VDb3VudAIBZBYCZg9kFrwDAgEPZBYEZg9kFgJmDw8WBB8ABR5BUk1FTklBICAgICAgICAgICAgICAgICAgICAgICAeC05hdmlnYXRlVXJsBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1BUk1FTklBICAgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQo0MzAsMTcwLjk0ZGQCAg9kFgRmD2QWAmYPDxYEHwAFHktJUklCQVRJICAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1LSVJJQkFUSSAgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQg2LDcyNi4wMGRkAgMPZBYEZg9kFgJmDw8WBB8ABQhNQUxBWVNJQR8FBSNDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1NQUxBWVNJQWRkAgEPDxYCHwAFDTc3LDQwMiw5NjkuMjlkZAIED2QWBGYPZBYCZg8PFgQfAAUeTkVXIFpFQUxBTkQgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPU5FVyBaRUFMQU5EICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFDTQ5LDYwNyw2OTcuODdkZAIFD2QWBGYPZBYCZg8PFgQfAAUeU0lFUlJBIExFT05FICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPVNJRVJSQSBMRU9ORSAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFDTIyLDgzNiw3MTEuNDBkZAIGD2QWBGYPZBYCZg8PFgQfAAUeQU5HT0xBICAgICAgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUFOR09MQSAgICAgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFDDgsOTY2LDIzOC40OWRkAgcPZBYEZg9kFgJmDw8WBB8ABR5CQUhSQUlOL0tJTkdET00gT0YgQkFIUkFJTiAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9QkFIUkFJTi9LSU5HRE9NIE9GIEJBSFJBSU4gICAgZGQCAQ8PFgIfAAUNNTAsMzM3LDA1MC44NWRkAggPZBYEZg9kFgJmDw8WBB8ABR5DQVlNQU4gSVNMQU5EUyAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9Q0FZTUFOIElTTEFORFMgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUJMjUsNzk3LjczZGQCCQ9kFgRmD2QWAmYPDxYEHwAFHkNPU1RBIFJJQ0EgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1DT1NUQSBSSUNBICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQ0xNiw4NzcsNjY5Ljk1ZGQCCg9kFgRmD2QWAmYPDxYEHwAFHkhBSVRJICAgICAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1IQUlUSSAgICAgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQw4LDcxMSw0MTYuMTRkZAILD2QWBGYPZBYCZg8PFgQfAAUeT01BTiAgICAgICAgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPU9NQU4gICAgICAgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFDTg4LDczMCwzNzguOTdkZAIMD2QWBGYPZBYCZg8PFgQfAAUeU0xPVkVOSUEgICAgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPVNMT1ZFTklBICAgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFDTEwLDkwMCwyMzguNzhkZAIND2QWBGYPZBYCZg8PFgQfAAUeU1dJVFpFUkxBTkQgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPVNXSVRaRVJMQU5EICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFDTMyLDc0MSwxOTIuNDhkZAIOD2QWBGYPZBYCZg8PFgQfAAUeU1lSSUFOIEFSQUIgUkVQVUJMSUMgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPVNZUklBTiBBUkFCIFJFUFVCTElDICAgICAgICAgIGRkAgEPDxYCHwAFDTEyLDMyMyw0NDEuMjdkZAIPD2QWBGYPZBYCZg8PFgQfAAUeVFVOSVNJQSAgICAgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPVRVTklTSUEgICAgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFDTE0LDQzNSw1MTMuMzBkZAIQD2QWBGYPZBYCZg8PFgQfAAUeVklSR0lOIElTTEFORFMgVS5TLiAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPVZJUkdJTiBJU0xBTkRTIFUuUy4gICAgICAgICAgIGRkAgEPDxYCHwAFCjEyNywzNjguNDZkZAIRD2QWBGYPZBYCZg8PFgQfAAUeWklNQkFCV0UgICAgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPVpJTUJBQldFICAgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFDDEsODg2LDgxNS40NWRkAhIPZBYEZg9kFgJmDw8WBB8ABR5BTEdFUklBICAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9QUxHRVJJQSAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUNMjUsNjk2LDAyNy4yNmRkAhMPZBYEZg9kFgJmDw8WBB8ABR5CUkFaSUwgICAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9QlJBWklMICAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUNNTEsMTk2LDAyMy4xMmRkAhQPZBYEZg9kFgJmDw8WBB8ABR5HQUJPTiAgICAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9R0FCT04gICAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUKNTU5LDA5Ni41N2RkAhUPZBYEZg9kFgJmDw8WBB8ABR5JQ0VMQU5EICAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9SUNFTEFORCAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUKNzU1LDE1OS4yM2RkAhYPZBYEZg9kFgJmDw8WBB8ABR5MRUJBTk9OICAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9TEVCQU5PTiAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUNMTUsODg3LDk4Ni42M2RkAhcPZBYEZg9kFgJmDw8WBB8ABR5NQVlPVFRFICAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9TUFZT1RURSAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUJMTEsNzMwLjAwZGQCGA9kFgRmD2QWAmYPDxYEHwAFHk1PTERPVkEgICAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1NT0xET1ZBICAgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQkzNCw5NjYuMTZkZAIZD2QWBGYPZBYCZg8PFgQfAAUeTkFVUlUgICAgICAgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPU5BVVJVICAgICAgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFCTM0LDM2MS45MGRkAhoPZBYEZg9kFgJmDw8WBB8ABR5QQUxBVSAgICAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9UEFMQVUgICAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUKMTEyLDAxMS42NWRkAhsPZBYEZg9kFgJmDw8WBB8ABR5UT0tFTEFVICAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9VE9LRUxBVSAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUGNTgwLjAwZGQCHA9kFgRmD2QWAmYPDxYEHwAFB0JPTElWSUEfBQUiQ09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9Qk9MSVZJQWRkAgEPDxYCHwAFCjc4MSw0MDcuMzVkZAIdD2QWBGYPZBYCZg8PFgQfAAUSQ0FNQk9ESUEvS0FNUFVDSEVBHwUFLUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUNBTUJPRElBL0tBTVBVQ0hFQWRkAgEPDxYCHwAFDTI2LDM5Myw4NTEuMTJkZAIeD2QWBGYPZBYCZg8PFgQfAAUeQ0hSSVNUTUFTIElTTEFORCAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUNIUklTVE1BUyBJU0xBTkQgICAgICAgICAgICAgIGRkAgEPDxYCHwAFCDUsMjUzLjMwZGQCHw9kFgRmD2QWAmYPDxYEHwAFBkdVSU5FQR8FBSFDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1HVUlORUFkZAIBDw8WAh8ABQ0yOCwwMTcsODk2LjYxZGQCIA9kFgRmD2QWAmYPDxYEHwAFHk1FWElDTyAgICAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1NRVhJQ08gICAgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQ05NSw5MzYsOTMwLjU0ZGQCIQ9kFgRmD2QWAmYPDxYEHwAFC05PUlRIIEtPUkVBHwUFJkNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPU5PUlRIIEtPUkVBZGQCAQ8PFgIfAAUMMiw4NTQsOTU3Ljc5ZGQCIg9kFgRmD2QWAmYPDxYEHwAFHlBBTkFNQSAgICAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1QQU5BTUEgICAgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQ0xOSw4OTIsNDQzLjM3ZGQCIw9kFgRmD2QWAmYPDxYEHwAFHlNMT1ZBSyBSRVBVQkxJQyAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1TTE9WQUsgUkVQVUJMSUMgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQw0LDc2MiwwMjMuNThkZAIkD2QWBGYPZBYCZg8PFgQfAAUeVFVSS0VNQU5JU1RBTiAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPVRVUktFTUFOSVNUQU4gICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFCjkxMywxMjEuNjhkZAIlD2QWBGYPZBYCZg8PFgQfAAUeQkFOR0xBREVTSCAgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUJBTkdMQURFU0ggICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFDjM3MCw0MTQsMzg0LjM2ZGQCJg9kFgRmD2QWAmYPDxYEHwAFHkJSSVRJU0ggSU5ESUFOIE9DRUFOIFRFUlJJVE9SSR8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1CUklUSVNIIElORElBTiBPQ0VBTiBURVJSSVRPUklkZAIBDw8WAh8ABQkyOCw1NDAuMDBkZAInD2QWBGYPZBYCZg8PFgQfAAUeQlVMR0FSSUEgICAgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUJVTEdBUklBICAgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFDDMsNTM3LDg0Ni4wNGRkAigPZBYEZg9kFgJmDw8WBB8ABR5DVUJBICAgICAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9Q1VCQSAgICAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUKNDI4LDc0Ni44N2RkAikPZBYEZg9kFgJmDw8WBB8ABR5DWkVDSCBSRVBVQkxJQyAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9Q1pFQ0ggUkVQVUJMSUMgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUNMjcsMzg4LDE3My4zN2RkAioPZBYEZg9kFgJmDw8WBB8ABR5ESklCT1VUSSAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9REpJQk9VVEkgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUMOCw5MTQsMjE0LjczZGQCKw9kFgRmD2QWAmYPDxYEHwAFHkVUSElPUElBICAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1FVEhJT1BJQSAgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQw3LDQ4NCw3NjIuOTJkZAIsD2QWBGYPZBYCZg8PFgQfAAUeRkFFUk9FIElTTEFORFMgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUZBRVJPRSBJU0xBTkRTICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFCDMsMzI5LjU1ZGQCLQ9kFgRmD2QWAmYPDxYEHwAFHkdJQlJBTFRBUiAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1HSUJSQUxUQVIgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQk4Niw5MjYuNjdkZAIuD2QWBGYPZBYCZg8PFgQfAAUKS2F6YWtoc3Rhbh8FBSVDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1LYXpha2hzdGFuZGQCAQ8PFgIfAAUNMTMsMjQxLDI0NS41OWRkAi8PZBYEZg9kFgJmDw8WBB8ABR5OSUdFUiAgICAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9TklHRVIgICAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUNMzUsMTgxLDMzMS4zOWRkAjAPZBYEZg9kFgJmDw8WBB8ABR5TQUlOVCBMVUNJQSAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9U0FJTlQgTFVDSUEgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUKNTI1LDE0MS4zMGRkAjEPZBYEZg9kFgJmDw8WBB8ABR5TRVJCSUEgICAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9U0VSQklBICAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUMMSwxMzIsMzYwLjU3ZGQCMg9kFgRmD2QWAmYPDxYEHwAFHkFNRVJJQ0FOIFNBTU9BICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1BTUVSSUNBTiBTQU1PQSAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQkxNyw0MzAuMDBkZAIzD2QWBGYPZBYCZg8PFgQfAAUeQVVTVFJJQSAgICAgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUFVU1RSSUEgICAgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFDTQ0LDQ4NSwwNzguNTdkZAI0D2QWBGYPZBYCZg8PFgQfAAUeQkVMR0lVTSAgICAgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUJFTEdJVU0gICAgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFDjQ5Niw0NjIsNTI2Ljc1ZGQCNQ9kFgRmD2QWAmYPDxYEHwAFBUNISU5BHwUFIENPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUNISU5BZGQCAQ8PFgIfAAUONjE5LDk3NSw5NzkuMzhkZAI2D2QWBGYPZBYCZg8PFgQfAAUeRkFMS0xBTkQgSVNMQU5EIChNQUxWSU5BUykgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUZBTEtMQU5EIElTTEFORCAoTUFMVklOQVMpICAgIGRkAgEPDxYCHwAFCjEwMyw5NjcuMTdkZAI3D2QWBGYPZBYCZg8PFgQfAAUGSk9SREFOHwUFIUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUpPUkRBTmRkAgEPDxYCHwAFDTMxLDYxMCw3ODIuODRkZAI4D2QWBGYPZBYCZg8PFgQfAAUeUkVVTklPTiAgICAgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPVJFVU5JT04gICAgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFDDMsMTQ3LDU3Ny42NmRkAjkPZBYEZg9kFgJmDw8WBB8ABR5TQU8gVE9NRSAmIFBSSU5DSVBFICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9U0FPIFRPTUUgJiBQUklOQ0lQRSAgICAgICAgICAgZGQCAQ8PFgIfAAUKMjE2LDc5Mi4wMGRkAjoPZBYEZg9kFgJmDw8WBB8ABR5UVVZBTFUgICAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9VFVWQUxVICAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUJODIsMTIwLjAwZGQCOw9kFgRmD2QWAmYPDxYEHwAFHkNPTU9ST1MgICAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1DT01PUk9TICAgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQ0xMywwOTcsODM2LjQ3ZGQCPA9kFgRmD2QWAmYPDxYEHwAFHkdIQU5BICAgICAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1HSEFOQSAgICAgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQ0xOCwxODEsNDYwLjk5ZGQCPQ9kFgRmD2QWAmYPDxYEHwAFHkdSRUVOTEFORCAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1HUkVFTkxBTkQgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQgyLDEwMC4wMGRkAj4PZBYEZg9kFgJmDw8WBB8ABQRJUkFOHwUFH0NPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUlSQU5kZAIBDw8WAh8ABQ4yMjEsMDQ5LDI2Mi43MmRkAj8PZBYEZg9kFgJmDw8WBB8ABQpLeXJneXpzdGFuHwUFJUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUt5cmd5enN0YW5kZAIBDw8WAh8ABQwxLDMwMiwyMDcuODNkZAJAD2QWBGYPZBYCZg8PFgQfAAUeTUFVUklUSVVTICAgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPU1BVVJJVElVUyAgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFDTUzLDM3MCwwNzEuMjBkZAJBD2QWBGYPZBYCZg8PFgQfAAUPTVlBTk1BUiAoQlVSTUEpHwUFKkNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPU1ZQU5NQVIgKEJVUk1BKWRkAgEPDxYCHwAFCTI5LDA4My4yNWRkAkIPZBYEZg9kFgJmDw8WBB8ABQZOT1JXQVkfBQUhQ09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9Tk9SV0FZZGQCAQ8PFgIfAAUNNjMsMzE4LDYyNC40N2RkAkMPZBYEZg9kFgJmDw8WBB8ABQRQRVJVHwUFH0NPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPVBFUlVkZAIBDw8WAh8ABQ0xMiw1MTksMzExLjkxZGQCRA9kFgRmD2QWAmYPDxYEHwAFEVJVU1NJQU4gRkVEUkFUSU9OHwUFLENPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPVJVU1NJQU4gRkVEUkFUSU9OZGQCAQ8PFgIfAAUNOTcsOTE5LDE1OC4yNGRkAkUPZBYEZg9kFgJmDw8WBB8ABR5TRVlDSEVMTEVTICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9U0VZQ0hFTExFUyAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUKNzA2LDAwNC4xNmRkAkYPZBYEZg9kFgJmDw8WBB8ABQhUQU5aQU5JQR8FBSNDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1UQU5aQU5JQWRkAgEPDxYCHwAFDTI4LDA3OCwxMTAuNjVkZAJHD2QWBGYPZBYCZg8PFgQfAAUeVEhBSUxBTkQgICAgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPVRIQUlMQU5EICAgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFDTc3LDYxMyw0NTAuNTdkZAJID2QWBGYPZBYCZg8PFgQfAAUeVFJJTklEQUQgQU5EIFRPQkFHTyAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPVRSSU5JREFEIEFORCBUT0JBR08gICAgICAgICAgIGRkAgEPDxYCHwAFDDQsNzgxLDU0OS43NGRkAkkPZBYEZg9kFgJmDw8WBB8ABR5BWkVSQkFJSkFOICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9QVpFUkJBSUpBTiAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUMNywwNjgsNTU3LjQwZGQCSg9kFgRmD2QWAmYPDxYEHwAFHkJSVU5FSSBEQVJVU1NBTEFNICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1CUlVORUkgREFSVVNTQUxBTSAgICAgICAgICAgICBkZAIBDw8WAh8ABQo4ODgsMzM2LjY4ZGQCSw9kFgRmD2QWAmYPDxYEHwAFHkNFTlRSQUwgQUZSSUNBTiBSRVBVQkxJQyAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1DRU5UUkFMIEFGUklDQU4gUkVQVUJMSUMgICAgICBkZAIBDw8WAh8ABQo0NzEsNTQzLjQ0ZGQCTA9kFgRmD2QWAmYPDxYEHwAFHkRPTUlOSUNBTiBSRVBVQkxJQyAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1ET01JTklDQU4gUkVQVUJMSUMgICAgICAgICAgICBkZAIBDw8WAh8ABQ0xMSw3NjgsMDkyLjM3ZGQCTQ9kFgRmD2QWAmYPDxYEHwAFHkdBTUJJQSAgICAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1HQU1CSUEgICAgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQw0LDc1MSwyMTYuMTJkZAJOD2QWBGYPZBYCZg8PFgQfAAUeR1VBREVMT1VQRSAgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUdVQURFTE9VUEUgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFCTU1LDQ2OS4zNWRkAk8PZBYEZg9kFgJmDw8WBB8ABR5LVVdBSVQgICAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9S1VXQUlUICAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUOMTEyLDU4Nyw2MzUuNTRkZAJQD2QWBGYPZBYCZg8PFgQfAAUeTElCWUFOIEFSQUIgSkFNSElSWUEgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUxJQllBTiBBUkFCIEpBTUhJUllBICAgICAgICAgIGRkAgEPDxYCHwAFDDUsNTczLDkxNy40OWRkAlEPZBYEZg9kFgJmDw8WBB8ABR5NQUxUQSAgICAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9TUFMVEEgICAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUMMyw1MDcsNjUyLjQ4ZGQCUg9kFgRmD2QWAmYPDxYEHwAFHlJPTUFOSUEgICAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1ST01BTklBICAgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQ0xNiw3MjMsMTQ3LjgxZGQCUw9kFgRmD2QWAmYPDxYEHwAFHlNBSU5UIFBJRVJSRSBNSVFVRUxPTiAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1TQUlOVCBQSUVSUkUgTUlRVUVMT04gICAgICAgICBkZAIBDw8WAh8ABQkxMCw4OTQuMzdkZAJUD2QWBGYPZBYCZg8PFgQfAAULU09VVEggS09SRUEfBQUmQ09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9U09VVEggS09SRUFkZAIBDw8WAh8ABQ4xODAsMTYwLDA5OC40OGRkAlUPZBYEZg9kFgJmDw8WBB8ABQZTV0VERU4fBQUhQ09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9U1dFREVOZGQCAQ8PFgIfAAUOMTIzLDUyMCw3MzguNzRkZAJWD2QWBGYPZBYCZg8PFgQfAAUeVVJVR1VBWSAgICAgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPVVSVUdVQVkgICAgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFDDgsNDEwLDk1OC40OWRkAlcPZBYEZg9kFgJmDw8WBB8ABR5WSVJHSU4gSVNMQU5EIEJSSVRJU0ggICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9VklSR0lOIElTTEFORCBCUklUSVNIICAgICAgICAgZGQCAQ8PFgIfAAUKMjk1LDgyNC40MmRkAlgPZBYEZg9kFgJmDw8WBB8ABR5CVVJVTkRJICAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9QlVSVU5ESSAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUKNDE1LDAzMi44MmRkAlkPZBYEZg9kFgJmDw8WBB8ABR5IRUFSRCBJU0xBTkQgQU5EIE1DRE9OQUxEIElTTEEfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9SEVBUkQgSVNMQU5EIEFORCBNQ0RPTkFMRCBJU0xBZGQCAQ8PFgIfAAUKMTQwLDQ1MC42MmRkAloPZBYEZg9kFgJmDw8WBB8ABQlTSU5HQVBPUkUfBQUkQ09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9U0lOR0FQT1JFZGQCAQ8PFgIfAAUNNTYsMTAxLDIxNy44M2RkAlsPZBYEZg9kFgJmDw8WBB8ABR5TT01BTElBICAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9U09NQUxJQSAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUMNCwwNjcsMDEyLjM3ZGQCXA9kFgRmD2QWAmYPDxYEHwAFBlRBSVdBTh8FBSFDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1UQUlXQU5kZAIBDw8WAh8ABQ03MCwxODEsMTcxLjY4ZGQCXQ9kFgRmD2QWAmYPDxYEHwAFHlRVUktTIEFORCAgQ0FJQ09TIElTTEFORCAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1UVVJLUyBBTkQgIENBSUNPUyBJU0xBTkQgICAgICBkZAIBDw8WAh8ABQoxMDMsOTMyLjAwZGQCXg9kFgRmD2QWAmYPDxYEHwAFHlZFTkVaVUVMQSwgQk9MSVZBUklBTiBSRVBVQkxJQx8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1WRU5FWlVFTEEsIEJPTElWQVJJQU4gUkVQVUJMSUNkZAIBDw8WAh8ABQ0zMCw3MzEsODg3LjQ4ZGQCXw9kFgRmD2QWAmYPDxYEHwAFCFZJRVQgTkFNHwUFI0NPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPVZJRVQgTkFNZGQCAQ8PFgIfAAUNNDYsNTEzLDE4MS4yNmRkAmAPZBYEZg9kFgJmDw8WBB8ABR5XRVNURVJOIFNIQUhSQSAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9V0VTVEVSTiBTSEFIUkEgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUJMjMsOTc1LjUxZGQCYQ9kFgRmD2QWAmYPDxYEHwAFHlpBTUJJQSAgICAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1aQU1CSUEgICAgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQwyLDE4OSw1NzMuNzVkZAJiD2QWBGYPZBYCZg8PFgQfAAUeQUxCQU5JQSAgICAgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUFMQkFOSUEgICAgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFCjM2Miw5MjQuNjdkZAJjD2QWBGYPZBYCZg8PFgQfAAUeQU5USUdVQSBBTkQgQkFSQlVEQSAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUFOVElHVUEgQU5EIEJBUkJVREEgICAgICAgICAgIGRkAgEPDxYCHwAFCDUsOTIwLjAwZGQCZA9kFgRmD2QWAmYPDxYEHwAFBUNISUxFHwUFIENPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUNISUxFZGQCAQ8PFgIfAAUOMTAwLDExMSw0MzEuODlkZAJlD2QWBGYPZBYCZg8PFgQfAAUGVFVSS0VZHwUFIUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPVRVUktFWWRkAgEPDxYCHwAFDjUwMyw3NDgsNzQ4Ljg5ZGQCZg9kFgRmD2QWAmYPDxYEHwAFHlVHQU5EQSAgICAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1VR0FOREEgICAgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQ0xMSw3ODYsMjk1LjU0ZGQCZw9kFgRmD2QWAmYPDxYEHwAFB1VrcmFpbmUfBQUiQ09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9VWtyYWluZWRkAgEPDxYCHwAFDTMyLDM5Miw4ODMuNDNkZAJoD2QWBGYPZBYCZg8PFgQfAAUFWUVNRU4fBQUgQ09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9WUVNRU5kZAIBDw8WAh8ABQ03MCw1ODMsOTA3LjY3ZGQCaQ9kFgRmD2QWAmYPDxYEHwAFHkVBU1QgVElNT1IgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1FQVNUIFRJTU9SICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQo1NTYsMDk4LjkxZGQCag9kFgRmD2QWAmYPDxYEHwAFHkVRVUFUT1JJQUwgR1VJTkVBICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1FUVVBVE9SSUFMIEdVSU5FQSAgICAgICAgICAgICBkZAIBDw8WAh8ABQwyLDkzNiwwNjkuOTBkZAJrD2QWBGYPZBYCZg8PFgQfAAUHSFVOR0FSWR8FBSJDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1IVU5HQVJZZGQCAQ8PFgIfAAUNNDIsMzk5LDU2My4xMGRkAmwPZBYEZg9kFgJmDw8WBB8ABR5JUkFRICAgICAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9SVJBUSAgICAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUNNTMsMDYxLDk1NC43N2RkAm0PZBYEZg9kFgJmDw8WBB8ABR5KQU1BSUNBICAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9SkFNQUlDQSAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUMNSwxNDMsMDQ4LjQyZGQCbg9kFgRmD2QWAmYPDxYEHwAFHk1BTEkgICAgICAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1NQUxJICAgICAgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQoxNDYsMzcyLjI1ZGQCbw9kFgRmD2QWAmYPDxYEHwAFHk1PTkdPTElBICAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1NT05HT0xJQSAgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQoxMTcsMDM1LjUzZGQCcA9kFgRmD2QWAmYPDxYEHwAFHk1PUk9DQ08gICAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1NT1JPQ0NPICAgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQ0xMyw0NTMsMDIzLjM1ZGQCcQ9kFgRmD2QWAmYPDxYEHwAFBlBvbGFuZB8FBSFDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1Qb2xhbmRkZAIBDw8WAh8ABQ03MCw2MDgsMTQwLjU3ZGQCcg9kFgRmD2QWAmYPDxYEHwAFHlBVRVJUTyBSSUNPICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1QVUVSVE8gUklDTyAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQw2LDgyMCwwNTYuOTFkZAJzD2QWBGYPZBYCZg8PFgQfAAUeQUZHSEFOSVNUQU4gICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUFGR0hBTklTVEFOICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFDjM0MiwwNjgsNzMyLjc0ZGQCdA9kFgRmD2QWAmYPDxYEHwAFHkFSVUJBICAgICAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1BUlVCQSAgICAgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQoyMzgsMDQ2Ljc5ZGQCdQ9kFgRmD2QWAmYPDxYEHwAFHkNBUEUgVkVSREUgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1DQVBFIFZFUkRFICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQozOTQsOTI4LjAwZGQCdg9kFgRmD2QWAmYPDxYEHwAFHkZJTkxBTkQgICAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1GSU5MQU5EICAgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQ01OSw2NTQsMzMwLjA4ZGQCdw9kFgRmD2QWAmYPDxYEHwAFHkZSQU5DRSAgICAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1GUkFOQ0UgICAgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQ40ODQsMTAyLDMyNy44M2RkAngPZBYEZg9kFgJmDw8WBB8ABR5JVEFMWSAgICAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9SVRBTFkgICAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUOODcwLDk0OCwyMTQuNjJkZAJ5D2QWBGYPZBYCZg8PFgQfAAUJTklDQVJBR1VBHwUFJENPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPU5JQ0FSQUdVQWRkAgEPDxYCHwAFDTI3LDQ2Myw2MzUuMjVkZAJ6D2QWBGYPZBYCZg8PFgQfAAUeUEFSQUdVQVkgICAgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPVBBUkFHVUFZICAgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFDDQsNzM3LDI5OC43OGRkAnsPZBYEZg9kFgJmDw8WBB8ABQtQSElMSVBQSU5FUx8FBSZDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1QSElMSVBQSU5FU2RkAgEPDxYCHwAFDTcwLDEwMywwNTUuMTFkZAJ8D2QWBGYPZBYCZg8PFgQfAAUeU0FJTlQgSEVMRU5BICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPVNBSU5UIEhFTEVOQSAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFCjE0NCwzNTUuNTBkZAJ9D2QWBGYPZBYCZg8PFgQfAAUeU0FNREEvU0FNT0EgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPVNBTURBL1NBTU9BICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFCDYsNTQ1LjAwZGQCfg9kFgRmD2QWAmYPDxYEHwAFHlNQQUlOICAgICAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1TUEFJTiAgICAgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQ42NDUsMDg5LDg2NC41MGRkAn8PZBYEZg9kFgJmDw8WBB8ABR5UT0dPICAgICAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9VE9HTyAgICAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUNMjksNTg3LDgyNC43N2RkAoABD2QWBGYPZBYCZg8PFgQfAAUeQ09MT01CSUEgICAgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUNPTE9NQklBICAgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFDTQ4LDU5MCwxMTQuMjhkZAKBAQ9kFgRmD2QWAmYPDxYEHwAFBUNPTkdPHwUFIENPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUNPTkdPZGQCAQ8PFgIfAAUNMTIsNTgwLDA0My4wMWRkAoIBD2QWBGYPZBYCZg8PFgQfAAUeQ1lQUlVTICAgICAgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUNZUFJVUyAgICAgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFDDksMzE0LDQxMy4yOWRkAoMBD2QWBGYPZBYCZg8PFgQfAAUeREVOTUFSSyAgICAgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPURFTk1BUksgICAgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFDTg2LDcxMiw4MTcuODNkZAKEAQ9kFgRmD2QWAmYPDxYEHwAFHkVSSVRSRUEgICAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1FUklUUkVBICAgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQozMTgsMDA5LjYxZGQChQEPZBYEZg9kFgJmDw8WBB8ABR5HVVlBTkEgICAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9R1VZQU5BICAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUKNTQzLDQzMi40N2RkAoYBD2QWBGYPZBYCZg8PFgQfAAUQSE9ORyBLT05HLCBDSElOQR8FBStDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1IT05HIEtPTkcsIENISU5BZGQCAQ8PFgIfAAUONzIzLDAxOCw1MTguMjhkZAKHAQ9kFgRmD2QWAmYPDxYEHwAFBUpBUEFOHwUFIENPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUpBUEFOZGQCAQ8PFgIfAAUOMTQ3LDUwMCw1MTcuMThkZAKIAQ9kFgRmD2QWAmYPDxYEHwAFHkxBTyBQRU9QTEUnUyBERU1PQ1JBVElDIFJFUFVCTB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1MQU8gUEVPUExFJ1MgREVNT0NSQVRJQyBSRVBVQkxkZAIBDw8WAh8ABQoyMTIsNzk1LjI1ZGQCiQEPZBYEZg9kFgJmDw8WBB8ABR5NQVJUSU5JUVVFICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9TUFSVElOSVFVRSAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUKMTA3LDQzNy41NmRkAooBD2QWBGYPZBYCZg8PFgQfAAUeTU9aQU1CSVFVRSAgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPU1PWkFNQklRVUUgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFDTcxLDMwNCwzMTIuNzhkZAKLAQ9kFgRmD2QWAmYPDxYEHwAFCllVR09TTEFWSUEfBQUlQ09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9WVVHT1NMQVZJQWRkAgEPDxYCHwAFDDEsNjE4LDU0Ny40MWRkAowBD2QWBGYPZBYCZg8PFgQfAAUJQVJHRU5USU5BHwUFJENPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUFSR0VOVElOQWRkAgEPDxYCHwAFDTYwLDE2OCwwNTYuMzZkZAKNAQ9kFgRmD2QWAmYPDxYEHwAFHkJFUk1VREEgICAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1CRVJNVURBICAgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQk0OSw5NjguMjBkZAKOAQ9kFgRmD2QWAmYPDxYEHwAFHkNIQUQgICAgICAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1DSEFEICAgICAgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQwyLDg5Myw1NzguMTJkZAKPAQ9kFgRmD2QWAmYPDxYEHwAFBUVHWVBUHwUFIENPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUVHWVBUZGQCAQ8PFgIfAAUOMTAyLDEwNiwzODMuODJkZAKQAQ9kFgRmD2QWAmYPDxYEHwAFHkZSRU5DSCBQT0xZTkVTSUEgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1GUkVOQ0ggUE9MWU5FU0lBICAgICAgICAgICAgICBkZAIBDw8WAh8ABQk2MCwyMjUuODVkZAKRAQ9kFgRmD2QWAmYPDxYEHwAFHkdFT1JHSUEgICAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1HRU9SR0lBICAgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQo2MDEsMDUxLjE1ZGQCkgEPZBYEZg9kFgJmDw8WBB8ABR5MSUJFUklBICAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9TElCRVJJQSAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUKNjg1LDkxOS41M2RkApMBD2QWBGYPZBYCZg8PFgQfAAUeTFVYRU1CT1VSRyAgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUxVWEVNQk9VUkcgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFCjY1OCw5NjAuOTNkZAKUAQ9kFgRmD2QWAmYPDxYEHwAFHk1BVVJJVEFOSUEgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1NQVVSSVRBTklBICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQo3OTksMDc5LjIyZGQClQEPZBYEZg9kFgJmDw8WBB8ABR5ORVBBTCAgICAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9TkVQQUwgICAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUMMyw3NDEsNTUyLjQ5ZGQClgEPZBYEZg9kFgJmDw8WBB8ABR5OT1JGT0xLIElTTEFORCAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9Tk9SRk9MSyBJU0xBTkQgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUMMSwzMTcsNDY4Ljk1ZGQClwEPZBYEZg9kFgJmDw8WBB8ABR5TV0FaSUxBTkQgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9U1dBWklMQU5EICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUMMiwzMzIsMTA1LjU1ZGQCmAEPZBYEZg9kFgJmDw8WBB8ABR5VTklURUQgU1RBVEVTICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9VU5JVEVEIFNUQVRFUyAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUQNiwxMjUsMjM3LDUwMS4wOGRkApkBD2QWBGYPZBYCZg8PFgQfAAUeVVBQRVIgVk9MVEEvQlVSS0lOQSBGQVNPICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPVVQUEVSIFZPTFRBL0JVUktJTkEgRkFTTyAgICAgIGRkAgEPDxYCHwAFCTY4LDAyNS4wOGRkApoBD2QWBGYPZBYCZg8PFgQfAAUeQkVMQVJVUyAgICAgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUJFTEFSVVMgICAgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFDDEsMDcxLDA0Mi44NGRkApsBD2QWBGYPZBYCZg8PFgQfAAUeTEFUVklBICAgICAgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUxBVFZJQSAgICAgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFDDYsMzE4LDQxNy44MWRkApwBD2QWBGYPZBYCZg8PFgQfAAUeTEVTT1RITyAgICAgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUxFU09USE8gICAgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFDDIsMTAxLDcxMy40OGRkAp0BD2QWBGYPZBYCZg8PFgQfAAUeTkVXIENBTEVET05JQSAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPU5FVyBDQUxFRE9OSUEgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFCjE5MCwzNDUuMDdkZAKeAQ9kFgRmD2QWAmYPDxYEHwAFHlBPUlRVR0FMICAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1QT1JUVUdBTCAgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQ4yMDYsMjAwLDMwOS42NWRkAp8BD2QWBGYPZBYCZg8PFgQfAAUeU0FJTlQgS0lUVFMgIEFORCBORVZJUyAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPVNBSU5UIEtJVFRTICBBTkQgTkVWSVMgICAgICAgIGRkAgEPDxYCHwAFCDgsMjUyLjM0ZGQCoAEPZBYEZg9kFgJmDw8WBB8ABQxTT1VUSCBBRlJJQ0EfBQUnQ09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9U09VVEggQUZSSUNBZGQCAQ8PFgIfAAUONDI5LDgyNSwxMTAuMzhkZAKhAQ9kFgRmD2QWAmYPDxYEHwAFHlNVUklOQU0gICAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1TVVJJTkFNICAgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQo5NTcsNzQ0Ljc5ZGQCogEPZBYEZg9kFgJmDw8WBB8ABQpUQUpJS0lTVEFOHwUFJUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPVRBSklLSVNUQU5kZAIBDw8WAh8ABQoyMzEsMzY4LjI5ZGQCowEPZBYEZg9kFgJmDw8WBB8ABR5VTklURUQgQVJBQiBFTUlSQVRFUyAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9VU5JVEVEIEFSQUIgRU1JUkFURVMgICAgICAgICAgZGQCAQ8PFgIfAAUQMSw3MzMsNDY5LDY2MC40NGRkAqQBD2QWBGYPZBYCZg8PFgQfAAUeQkhVVEFOICAgICAgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUJIVVRBTiAgICAgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFCDIsOTc0LjI1ZGQCpQEPZBYEZg9kFgJmDw8WBB8ABR5CT1NOSUEgQU5EIEhFUlpFR09WSU5BICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9Qk9TTklBIEFORCBIRVJaRUdPVklOQSAgICAgICAgZGQCAQ8PFgIfAAUKNDI5LDAxNi41OGRkAqYBD2QWBGYPZBYCZg8PFgQfAAUeQ09PSyBJU0xBTkRTICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUNPT0sgSVNMQU5EUyAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFCDksNTk5Ljk4ZGQCpwEPZBYEZg9kFgJmDw8WBB8ABR5FQ1VBRE9SICAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9RUNVQURPUiAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUMNSw4OTksMDc1LjQ5ZGQCqAEPZBYEZg9kFgJmDw8WBB8ABR5HVUFURU1BTEEgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9R1VBVEVNQUxBICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUNMjYsNjQ5LDg5NS4zN2RkAqkBD2QWBGYPZBYCZg8PFgQfAAUHSVJFTEFORB8FBSJDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1JUkVMQU5EZGQCAQ8PFgIfAAUNNTUsNjMwLDc3My45M2RkAqoBD2QWBGYPZBYCZg8PFgQfAAUGSVNSQUVMHwUFIUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUlTUkFFTGRkAgEPDxYCHwAFCjEyMSwyMzUuOTlkZAKrAQ9kFgRmD2QWAmYPDxYEHwAFHk1BQ0FVLCBDSElOQSAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1NQUNBVSwgQ0hJTkEgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQoyMDAsODU1LjY4ZGQCrAEPZBYEZg9kFgJmDw8WBB8ABR5NQUxBV0kgICAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9TUFMQVdJICAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUMMiw3NTQsMzE5Ljc0ZGQCrQEPZBYEZg9kFgJmDw8WBB8ABR5NQUxESVZFUyAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9TUFMRElWRVMgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUMMyw4NzksMDg3LjIyZGQCrgEPZBYEZg9kFgJmDw8WBB8ABR5NWUFOTUFSL0JVUk1BICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9TVlBTk1BUi9CVVJNQSAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUMMSw5ODgsMjI4LjA3ZGQCrwEPZBYEZg9kFgJmDw8WBB8ABQ1QQUtJU1RBTihFUFopHwUFKENPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPVBBS0lTVEFOKEVQWilkZAIBDw8WAh8ABQ4xNjMsMzQ3LDYwNC4wNWRkArABD2QWBGYPZBYCZg8PFgQfAAUeUldBTkRBICAgICAgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPVJXQU5EQSAgICAgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFDDEsMzYxLDYyNy4xNmRkArEBD2QWBGYPZBYCZg8PFgQfAAUeU09VVEggR0VPUkdJQSBBTkQgVEhFIFNPVVRIIFNBHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPVNPVVRIIEdFT1JHSUEgQU5EIFRIRSBTT1VUSCBTQWRkAgEPDxYCHwAFCTE2LDU1MC4wMGRkArIBD2QWBGYPZBYCZg8PFgQfAAUeV0FMTElTIEFORCAgRlVUVU5BICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPVdBTExJUyBBTkQgIEZVVFVOQSAgICAgICAgICAgIGRkAgEPDxYCHwAFCjIxOCwwMjcuNzVkZAKzAQ9kFgRmD2QWAmYPDxYEHwAFHkFOR1VJTExBICAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1BTkdVSUxMQSAgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQY2NjAuODBkZAK0AQ9kFgRmD2QWAmYPDxYEHwAFHkNBTUVST09OICAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1DQU1FUk9PTiAgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQ0yOCwwMDgsMjE4Ljg0ZGQCtQEPZBYEZg9kFgJmDw8WBB8ABR5FdXJvcGllbiBVbmlvbiAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9RXVyb3BpZW4gVW5pb24gICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUKNjk5LDYzMC4yN2RkArYBD2QWBGYPZBYCZg8PFgQfAAUeR1JFTkFEQSAgICAgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUdSRU5BREEgICAgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFCTE3LDI5Ni43NmRkArcBD2QWBGYPZBYCZg8PFgQfAAUeSVZPUlkgQ09BU1QgLyBDT1RFIEQnSVZPSVJFICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUlWT1JZIENPQVNUIC8gQ09URSBEJ0lWT0lSRSAgIGRkAgEPDxYCHwAFDTc4LDg1Miw1NjMuNTlkZAK4AQ9kFgRmD2QWAmYPDxYEHwAFHk1BREFHQVNDQVIgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1NQURBR0FTQ0FSICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQ0yOSw2NDIsNjg1LjQ2ZGQCuQEPZBYEZg9kFgJmDw8WBB8ABR5QQVBVQSBORVcgR1VJTkVBICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9UEFQVUEgTkVXIEdVSU5FQSAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUKMzIwLDM3Ny43NWRkAroBD2QWBGYPZBYCZg8PFgQfAAUJU1JJIExBTktBHwUFJENPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPVNSSSBMQU5LQWRkAgEPDxYCHwAFDjI0MywzMjUsMDY3LjI0ZGQCuwEPZBYEZg9kFgJmDw8WBB8ABR5CQVJCQURPUyAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9QkFSQkFET1MgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUKNDAxLDg5OC43MGRkArwBD2QWBGYPZBYCZg8PFgQfAAUeQkVMSVpFICAgICAgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUJFTElaRSAgICAgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFCjk4MiwwMDIuNjVkZAK9AQ9kFgRmD2QWAmYPDxYEHwAFHkJFTklOICAgICAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1CRU5JTiAgICAgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQ01MiwyMzQsMjk2LjY5ZGQCvgEPZBYEZg9kFgJmDw8WBB8ABR5CT1RTV0FOQSAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9Qk9UU1dBTkEgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUMMiw3OTEsOTk3LjA5ZGQCvwEPZBYEZg9kFgJmDw8WBB8ABR5DQU5BREEgICAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9Q0FOQURBICAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUOMzEwLDkzNCwxNjQuMjJkZALAAQ9kFgRmD2QWAmYPDxYEHwAFFUZPUk1FUiBDWkVDSE9TTE9WQUtJQR8FBTBDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1GT1JNRVIgQ1pFQ0hPU0xPVkFLSUFkZAIBDw8WAh8ABQk0MSwxMzkuMTJkZALBAQ9kFgRmD2QWAmYPDxYEHwAFHkdSRUVDRSAgICAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1HUkVFQ0UgICAgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQ4xMzAsMzk1LDE3OS4wMmRkAsIBD2QWBGYPZBYCZg8PFgQfAAUFSU5ESUEfBQUgQ09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9SU5ESUFkZAIBDw8WAh8ABQ40OTAsMjgyLDExMC4wM2RkAsMBD2QWBGYPZBYCZg8PFgQfAAUeTkFNSUJJQSAgICAgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPU5BTUlCSUEgICAgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFCjg5Miw1NjEuNjNkZALEAQ9kFgRmD2QWAmYPDxYEHwAFHk5JR0VSSUEgICAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1OSUdFUklBICAgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQ00NiwxNDcsMDQ1LjU3ZGQCxQEPZBYEZg9kFgJmDw8WBB8ABR5RQVRBUiAgICAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9UUFUQVIgICAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUNNzEsNTYzLDgzNi4xN2RkAsYBD2QWBGYPZBYCZg8PFgQfAAUOUkVVTklPTiBJU0xBTkQfBQUpQ09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9UkVVTklPTiBJU0xBTkRkZAIBDw8WAh8ABQkyNCwxMDYuMDhkZALHAQ9kFgRmD2QWAmYPDxYEHwAFDFNBVURJIEFSQUJJQR8FBSdDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1TQVVESSBBUkFCSUFkZAIBDw8WAh8ABQ40MTMsNzg0LDU4OS43OGRkAsgBD2QWBGYPZBYCZg8PFgQfAAUeU0VORUdBTCAgICAgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPVNFTkVHQUwgICAgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFDTEyLDYzMiw1NDguMDdkZALJAQ9kFgRmD2QWAmYPDxYEHwAFHlVaQkVLSVNUQU4gICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1VWkJFS0lTVEFOICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQwyLDk2NCw2ODIuMzlkZALKAQ9kFgRmD2QWAmYPDxYEHwAFHkFORE9SUkEgICAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1BTkRPUlJBICAgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQg2LDc5NS4zM2RkAssBD2QWBGYPZBYCZg8PFgQfAAUeQVVTVFJBTElBICAgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUFVU1RSQUxJQSAgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFDjE3Miw3OTAsOTI1LjYzZGQCzAEPZBYEZg9kFgJmDw8WBB8ABR5CQUhBTUFTICAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9QkFIQU1BUyAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUKMTUwLDA4MC43N2RkAs0BD2QWBGYPZBYCZg8PFgQfAAUHQkFIUkFJTh8FBSJDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1CQUhSQUlOZGQCAQ8PFgIfAAUMNywyODMsMzc3LjEwZGQCzgEPZBYEZg9kFgJmDw8WBB8ABR5DUk9BVElBICAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9Q1JPQVRJQSAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUNMTEsMzEzLDcwMy41NmRkAs8BD2QWBGYPZBYCZg8PFgQfAAUeRUwgU0FMVkFET1IgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUVMIFNBTFZBRE9SICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFDTE3LDI3OCw0NzguMDdkZALQAQ9kFgRmD2QWAmYPDxYEHwAFHkdVQU0gICAgICAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1HVUFNICAgICAgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQg4LDkzMi4zMmRkAtEBD2QWBGYPZBYCZg8PFgQfAAUJSU5ET05FU0lBHwUFJENPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUlORE9ORVNJQWRkAgEPDxYCHwAFDTgzLDUwMywyMTAuNjBkZALSAQ9kFgRmD2QWAmYPDxYEHwAFHktFTllBICAgICAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1LRU5ZQSAgICAgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQ4xMTQsMTMyLDA2My42OWRkAtMBD2QWBGYPZBYCZg8PFgQfAAUeTU9OVFNFUlJBVCAgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPU1PTlRTRVJSQVQgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFCDMsMzMzLjI3ZGQC1AEPZBYEZg9kFgJmDw8WBB8ABQdFU1RPTklBHwUFIkNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUVTVE9OSUFkZAIBDw8WAh8ABQ0xOSw4MzYsOTU0LjA2ZGQC1QEPZBYEZg9kFgJmDw8WBB8ABR5GSUpJICAgICAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9RklKSSAgICAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUKODEzLDk2OS42MGRkAtYBD2QWBGYPZBYCZg8PFgQfAAUeR0VSTUFOWSAgICAgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUdFUk1BTlkgICAgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFDjk1Myw5ODQsNjQ0LjQ4ZGQC1wEPZBYEZg9kFgJmDw8WBB8ABR5IT05EVVJBUyAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9SE9ORFVSQVMgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUNMjAsODEwLDI1MC45OGRkAtgBD2QWBGYPZBYCZg8PFgQfAAUeTElUSFVBTklBICAgICAgICAgICAgICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPUxJVEhVQU5JQSAgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFDTM3LDc1Miw1NDAuMzJkZALZAQ9kFgRmD2QWAmYPDxYEHwAFC05FVEhFUkxBTkRTHwUFJkNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPU5FVEhFUkxBTkRTZGQCAQ8PFgIfAAUONTUzLDU3NiwzNjAuNjFkZALaAQ9kFgRmD2QWAmYPDxYEHwAFHk5FVEhFUkxBTkRTIEFOVElMTEVTICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1ORVRIRVJMQU5EUyBBTlRJTExFUyAgICAgICAgICBkZAIBDw8WAh8ABQwxLDAwNCw1NTMuNjZkZALbAQ9kFgRmD2QWAmYPDxYEHwAFHlNVREFOICAgICAgICAgICAgICAgICAgICAgICAgIB8FBTlDT1VOVFJZV0lTRV9EVEw0MTEuYXNweD9pZD1TVURBTiAgICAgICAgICAgICAgICAgICAgICAgICBkZAIBDw8WAh8ABQ0zMCw5ODIsNjc0LjYyZGQC3AEPZBYEZg9kFgJmDw8WBB8ABR5UT05HQSAgICAgICAgICAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9VE9OR0EgICAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUJMzYsMjk5Ljg0ZGQC3QEPZBYEZg9kFgJmDw8WBB8ABR5VTklURUQgS0lOR0RPTSAgICAgICAgICAgICAgICAfBQU5Q09VTlRSWVdJU0VfRFRMNDExLmFzcHg%2FaWQ9VU5JVEVEIEtJTkdET00gICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUQMSwzMDksMjQ2LDMyMy44N2RkAt4BD2QWBGYPZBYCZg8PFgQfAAUeVkFUSUNBTiBDSVRZL0hPTFkgU0VFICAgICAgICAgHwUFOUNPVU5UUllXSVNFX0RUTDQxMS5hc3B4P2lkPVZBVElDQU4gQ0lUWS9IT0xZIFNFRSAgICAgICAgIGRkAgEPDxYCHwAFCTY3LDc5My40OWRkAiAPDxYCHwAFASBkZBgBBR5fX0NvbnRyb2xzUmVxdWlyZVBvc3RCYWNrS2V5X18WAwUMUmFkaW9CdXR0b24xBQxSYWRpb0J1dHRvbjEFDFJhZGlvQnV0dG9uMtFYGRsf900RrFtZcXmmHskwY%2Bdq2nFQWiBOmoK5%2FSFS&__VIEWSTATEGENERATOR=85B54101&__EVENTVALIDATION=%2FwEdADXRiZlhbeOxJ08A97hgYwt2PuLf%2Fr7fQHOXAYP2oZ7q0rIXB2llOH4QIJOw0V5zpBZzGSpxAjYLRR3P0ZBXrC5RVNJr4kqBzIHD0AKyCTl9xytHB7pq4kB53Lcj7oktgNrEPwpEGRfQfvQvJGqJYsh3RV%2BeopYXoQo06g1hqa5HSSildl5ZjVSd112MiVtCFQwG8eelAWzXg1Ku6vi7T63p46HP15qvbotHpJSyS9BDc%2B%2BvYrZ8ovHXjpoVzPBbdw1Im4OueowOYJKes2oX1k9juD%2F8nCr%2BaoDZ4ty2yaKsgz%2BCLksh0eouFqiQ5ejdB7pAUpqaKu258TNV8p8bolyDY0tcFui9j%2BCNHCCIahlzEUbJwus%2B6FH5q%2FDlCzRn%2Bw18Ad1Eer%2BXVsT%2B1T8cyz3XcJM5JaQ29ISgKJgQDxe%2FVrrzDtzSBGIIejMlZgYHEFhJCpQ6ZJONo6oJub6rtWGoFoGwoWQ9at0qjrNjlGiaTvT%2BWnsPWHYrdEioHZIKE4pj0RBsYKmeGrYuJRFbjt7%2BItO%2F9W4NRNflO1h337%2FYE5pXVoIbPMLAs3FA8WEpYjSyIla%2BZnYGushtNlF5Fua6c0U0TTjFdosoTCbId4wwqo5uAMzI8WLS1K4jRh2Ne0Hqm2YwC%2F9hI2Xa71UyPuXk2%2BYh7ZpskD2Dma%2FhmhdBihkpDsZPU0NcR%2FeB9ZQO9Hdk3sm6BJB%2BG%2BUUM%2B4NdjP4l9%2BRmBD4HTDipYadIuhjmx8AbSA7APueDwky3B6QJuZlGFjzScUqeNUSicPOTBcwAxmuW4krRCi7%2FbRsYo8PJZbYL70TOf5BUHxCWKuFy%2Bqs%2BBAIl2P7joHPdMCWky4FVfl42ieiCx%2FRPVwQA%2FAQtK6VBwpOvCxjKScAUgTpFjTJSQm1UXQsBed57Dtk5yuKJT7EHI5xpLcxa4cJOUZX0ty1q4G9X2SbHFI9cbCHvr%2Bx%2BxGjDnqhiuKx3LjB1cioz33H8ULTxue3%2ByDuS39%2FvgT6c73T%2Bx805xMF5pc4OBOsmNzsOgfKuyfAjwUrEvQzdKpr8OmUO5ijeiBDufXhJE7CgIcfJX2a1CEveKgqTbEWbm5N9p7EtmC65jSqiWXrt7fJ8x0%2BU%2BLS4INnFymyWeZbW2B9h9b%2B%2FwYkELiHDZJ2q2T7cS0Fty%2ByCvJ%2F9C0j" \
              "&DLL_MONTH={month}&DLL_YEAR={year}&DLL_MONTH1={month}&DLL_YEAR1={year}&PAKISTAN=RadioButton2&Submit2=.".format(year=year, month=month)
        response = requests.request("POST", url, data=payload, headers=headers)
        tree = etree.HTML(response.text)
        country_trs = tree.xpath('//a[contains(@href,"COUNTRYWISE_DTL")]')
        date_key = "01" + "-" + str(month) + "-" + str(year)
        yearly_data[date_key] = {}
        for i in range(0, len(country_trs)):
            country_name = country_trs[i].text.strip().upper()
            if country_name:
                if country_name not in all_countries:
                    all_countries.append(country_name)
                amount = country_trs[i].xpath('../../td[2]')[0].text.strip().replace(',', '')
                yearly_data[date_key][country_name] = amount

f = open("data/stats3.csv", "w+")
# create headers for all countries:
f.write('"DATE",')
for country in all_countries[:-1]:
    f.write('"' + country + '",')
f.write('"' + all_countries[-1] + '"\n')
# writing data now
for year in years:
    for month in months:
        date_key = '01-{month}-{year}'.format(month=month, year=year)
        f.write('"{year}-{month}-01"'.format(month=month, year=year)+",")
        for country in all_countries[:-1]:
            if country in yearly_data[date_key]:
                f.write(yearly_data[date_key][country] + ',')
            else:
                f.write('"",')
        f.write((yearly_data[date_key][all_countries[-1]] if all_countries[-1] in yearly_data[date_key] else '') + '\n')
f.close()

# country_details = {}
# detail_url = "http://www.fbr.gov.pk/TradeStatistics/COUNTRYWISE_DTL411.aspx"
#
#
# headers = {
#     'accept-encoding': "gzip, deflate, sdch",
#     'accept-language': "en-US,en;q=0.8,ur;q=0.6",
#     'cache-control': "no-cache",
#     'connection': "keep-alive",
#     'cookie': "ASP.NET_SessionId=4gnlbljsl0g01h3v11fy5fid",
#     'dnt': "1",
#     'referer': "http://www.fbr.gov.pk/TradeStatistics/COUNTRYWISE411.aspx",
#     'upgrade-insecure-requests': "1",
#     'user-agent': "Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.81 Safari/537.36"
# }
# for country_data in countries_data:
#     querystring = {"id": country_data.get('country_name')}
#     country_details[querystring.get('id')] = []
#
#     response = requests.request("GET", detail_url, headers=headers, params=querystring)
#
#     tree = etree.HTML(response.text)
#     tree_elems = tree.xpath('//table[@id="DataGrid1"]/tr')
#     # tds = tree.xpath('//table//td')
#     for element in tree_elems:
#         sub_tds = element.xpath('./td')
#         obj = {
#             'code': sub_tds[1].text.strip().replace('.', '-'),
#             'description': sub_tds[2].text.strip().replace('.', '-'),
#             'amount': sub_tds[3].text.strip()
#         }
#         country_details[querystring.get('id')].append(obj)
#     print querystring.get('id')
#     print country_details[querystring.get('id')]
#
# print(country_details)